#!/usr/bin/env ruby

require_relative '../lib/ezgff'
require 'thor'
require 'color_echo/get'

class EzgffCLI < Thor

  ## hack to enable -h option
  ## ref: https://magazine.rubyist.net/articles/0046/0046-Milkode.html#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-milk-add--h-%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B

  class_option :help, :type => :boolean, :aliases => '-h', :desc => 'Help message'

  no_tasks do
    def invoke_command(task, *args)
      if options[:help] &&
        task.name != 'grep'
        EzgffCLI.task_help(shell, task.name)
      elsif options[:version] && task.name == 'help'
        puts "milk #{Version}"
      else
        super
      end
    end
  end
  ## end of -h option setting

  desc "view DB QUERY", "retrieve GFF record by ID and view it in a specified format.
  DB     path to ezdb
         ezdb should be created by using 'build' subcommand in advance.
  QUERY  query for search
         Two modes, simple mode and advanced mode are available.       
         Simple mode
           ID is given and search by the ID.
         Advanced mode
           Query is given in KEY=VALUE style. Available keys are
           ID: ID (ex. ID=rna-XM_029485812.1)
           LN: Line number (ex. LN=255)
         Note: Spaces are not allowed before and after =
           
  "

  option :format, :aliases => '-f', :enum => ["json", "gff"], :default => "gff", :desc => "Specify output format."
  option :with, :aliases => '-w', :enum => ["none", "parent", "children", "ancestors", "descendants"], :default => "none", :desc => "Retrieve data with parent or children features."
  option :type, :aliases => '-t', :desc => "Limit type (Column \#3 in GFF file) such as gene, mRNA and CDS"

  def view(db, query)
    ezdb = db
    files = Dir["#{ezdb}/*.sqlite3"]
    sq3_file = nil
    if files.size == 1
      sq3_file = files[0]
    elsif files.size == 0
      raise "sqlite3 file not found"
    elsif files.size > 1
      raise "Multiple sqlite3 files found"
    end
    sq3_db = GffDb.new(sq3_file)

    if m = /^LN\=/.match(query)
      ## search by line number
      query2 = m.post_match.strip
      ann = sq3_db.get_by_line_number(query2)
    elsif m = /^ID\=/.match(query)
      ## search by ID
      query2 = m.post_match.strip
      ann = sq3_db.get(query2)
    else
      ann = sq3_db.get(query)
    end

    results = []
    if options[:with] == "descendants"
      results = ann.descendants
    elsif options[:with] == "ancestors"
      results = ann.ancestors
    else
      parent = nil
      if options[:with] == "parent"
        parent = ann.parent
      end
      children = []
      if options[:with] == "children"
        ann.children.each do |c|
          children << c
        end
      end

      results = []
      results << parent if parent
      results << ann
      results += children
    end

    ## Filter results
    ## - type / type
    if options[:type]
      target_type = options[:type]
      results = results.select{|r| r.type == target_type}
    end

    case options[:format]
    when "json"
      h = Hash.new
      ary = results.map{|r| r.to_h}
      h["gff_records"] = ary
      puts h.to_json
      
    when "gff"
      puts results
    else
      raise "Unknown format: #{options[:format]}"
    end

  end

  desc "build GFF", "build database from GFF file"
  option :help, :aliases => :h, :type => :boolean
  def build(gff_in)
#    puts "build #{gff_file} => #{dbpath}"
    dbpath = GffDb.build_db(gff_in)
    STDERR.puts "new database created: #{dbpath}"
    gff_file = dbpath + "/" + File.basename(gff_in)
    GffDb.build_tabix(gff_file)
  end

  desc "search DB QUERY", "search GFF record giving query"
  option :format, :aliases => :f, :enum => ["json", "gff"], :default => "gff"
  def search(db, query)
    ezdb = db
    files = Dir["#{ezdb}/*.sqlite3"]
    sq3_file = nil
    if files.size == 1
      sq3_file = files[0]
    elsif files.size == 0
      raise "sqlite3 file not found"
    elsif files.size > 1
      raise "Multiple sqlite3 files found"
    end
    sq3_db = GffDb.new(sq3_file)
    results = sq3_db.search(query, 100)
    case options[:format]
    when "json"
      h = Hash.new
      ary = results.map{|r| r.to_h}
      h["gff_records"] = ary
      puts h.to_json
    when "gff"
      gfftxt = results.map{|r| r.to_s}.join("\n")
      puts CE.pickup(/#{query}/i, :green, nil, :bold).get(gfftxt)
    else
      raise "Unknown format: #{options[:format]}"
    end
  end

end

EzgffCLI.start(ARGV)



