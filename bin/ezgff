#!/usr/bin/env ruby

require_relative '../lib/ezgff'
require 'thor'

class EzgffCLI < Thor

  desc "view DB QUERY", "retrieve GFF record by ID and view it in a specified format."
  option :format, :aliases => :f, :enum => ["json", "gff"], :default => "gff"
  option :with_parent, :aliases => :p, :enum => ["yes", "no"], :default => "no", :banner => "yes|no"
  option :with_children, :aliases => :c, :enum => ["yes", "no"], :default => "no", :banner => "yes|no"
  option :help, :aliases => :h, :type => :boolean
  def view(db, query)
    ezdb = db
    files = Dir["#{ezdb}/*.sqlite3"]
    sq3_file = nil
    if files.size == 1
      sq3_file = files[0]
    else
      raise "sqlite3 file not found or multiple files found"
    end
    sq3_db = GffDb.new(sq3_file)
    ann = sq3_db.get(query)
    
    parent = nil
    if options[:with_parent] == "yes"
      parent = ann.parent
    end

    children = []
    if options[:with_children] == "yes"
      ann.children.each do |c|
        children << c
      end
    end

    results = []
    results << parent if parent
    results << ann
    results += children
      
    case options[:format]
    when "json"
      h = Hash.new
      ary = results.map{|r| r.to_h}
      h["gff_records"] = ary
      puts h.to_json
      
    when "gff"
      puts results
    else
      raise "Unknown format: #{options[:format]}"
    end

  end

  desc "build GFF", "build database from GFF file"
  option :help, :aliases => :h, :type => :boolean
  def build(gff_in)
#    puts "build #{gff_file} => #{dbpath}"
    dbpath = GffDb.build_db(gff_in)
    STDERR.puts "new database created: #{dbpath}"
    gff_file = dbpath + "/" + File.basename(gff_in)
    GffDb.build_tabix(gff_file)
  end

  desc "search DB QUERY", "search GFF record giving query"
  def search(db, query)
  end

end

EzgffCLI.start(ARGV)



