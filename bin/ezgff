#!/usr/bin/env ruby

require_relative '../lib/ezgff'
require 'thor'

class EzgffCLI < Thor
  desc "view DB QUERY", "retrieve GFF record by ID and view it in a specified format."
  option :format, :aliases => :f, :enum => ["json", "gff"], :default => "gff",
  :banner => "banner"
  option :help, :aliases => :h, :type => :boolean
  def view(db, query)
    ezdb = db
    files = Dir["#{ezdb}/*.sqlite3"]
    sq3_file = nil
    if files.size == 1
      sq3_file = files[0]
    else
      raise "sqlite3 file not found or multiple files found"
    end
    sq3_db = GffDb.new(sq3_file)
    ann = sq3_db.get(query)
    #p ann
    #puts ann.to_s
    case options[:format]
    when "json"
      puts ann.to_json
    when "gff"
      puts ann
    else
      raise "Unknown format: #{options[:format]}"
    end
  end

  desc "build GFF", "build database from GFF file"
  option :help, :aliases => :h, :type => :boolean
  def build(gff_in)
#    puts "build #{gff_file} => #{dbpath}"
    dbpath = GffDb.build_db(gff_in)
    STDERR.puts "new database created: #{dbpath}"
    gff_file = dbpath + "/" + File.basename(gff_in)
    GffDb.build_tabix(gff_file)
  end

end



  EzgffCLI.start(ARGV)

  exit
dbname = ARGV[0]
query = ARGV[1]
db = GffDb.new(dbname)
begin
  ann = db.get(query)
  #p ann
  #puts ann.to_s
  puts ann.to_json
  #puts ann.parent
  #puts ann.children
  #p ann.dbxrefs
rescue
  raise $!
end
#db.each_record do |r|
#  p r.attributes
#end

